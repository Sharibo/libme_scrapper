##############################
# docx setup

# XHTMLImporter needs to know how to convert pixel measurements
# This is read by UnitsOfMeasurement
#docx4j.DPI=96

# Page size: use a value from org.docx4j.model.structure.PageSizePaper enum
# eg A4, LETTER
docx4j.PageSize=A4
# Page size: use a value from org.docx4j.model.structure.MarginsWellKnown enum
docx4j.PageMargins=NARROW
docx4j.PageOrientationLandscape=false

# These will be injected into docProps/app.xml
# if App.Write=true; as of 6.1 this is only done for new documents, in order to preserve whatever was there already
docx4j.App.write=true
docx4j.Application=docx4j
docx4j.AppVersion=8.3
# of the form XX.YYYY where X and Y represent numerical values
# WARNING: -SNAPSHOT will cause Word 2010 x64 to treat the docx as corrupt! 
# so we set it here, instead of using Version.getDocx4jVersion()

# These will be injected into docProps/core.xml; creator is only set if not already present (lastModifiedBy is fair game)
docx4j.dc.write=true
#docx4j.dc.creator.value=docx4j
#docx4j.dc.lastModifiedBy.value=docx4j

# By default, docx4j often logs an error before re-throwing, for easier diagnosis.  
# After v3.3.2, this property allowed you to stop that logging if you want 
# In v6.1.0, most of these log events were removed
# https://github.com/plutext/docx4j/pull/329
# so this property is now only used in our XSLT LoggingErrorListener  
docx4j.openpackaging.exceptions.LogBeforeThrow=true

# If this is set to a positive value, docx4j will throw
# a PartTooLarge exception if a part being unmarshalled from a zip file is
# larger than the set value.  Purpose is to avoid unmarshalling
# files which will take too long (eg a 300MB document.xml part).
# Setting this still allows the docx to be unzipped, in case there
# are things you want to do with it  (short of unmarshalling this part) 
# since docx4j 6.0.0
docx4j.openpackaging.parts.MAX_BYTES.unmarshal.error=-1

# If this is set to a positive value, docx4j will throw
# a PartTooLarge exception if a part being loaded from a zip file is
# larger than the set value.  This will prevent this docx from 
# being opened at all.  
# since docx4j 6.0.0
docx4j.openpackaging.parts.MAX_BYTES.unzip.error=-1
# named so could potentially have unzip.warn

##############################
# docx4j general config

# Use output method "xml" (as opposed to "html")
docx4j.Convert.Out.HTML.OutputMethodXML=true

# convert a bookmark to anchor (a), @id (id), or ignore (null)
# defaults to anchor. @since 3.2.1 
docx4j.Convert.Out.HTML.BookmarkStartWriter.mapTo=a

# If false, throw an exception if something is encountered which
# output processing is unable to handle.  TODO fully implement this.
docx4j.Convert.Out.Lossy=true

# In 6.1.0, docx4j checks bookmarks are OK (ie no duplicates, no missing starts or ends), 
# before using them for ToC operations.
# The default behaviour is to throw an exception if any bookmarks are broken.  
# Set this to try to have docx4j fix them. It does this by DELETING broken bookmarks.
# A future version might instead try to be more graceful, by inserting missing starts or ends nearby.
# @since 6.1.0
docx4j.toc.BookmarksIntegrity.remediate=false

# If true, parse 12/04/2012 as 4 December 
docx4j.Fields.Dates.DateFormatInferencer.USA=true

# What to treat as the decimal point when converting a string
# to a number.  Fallback only, 
# used if the docx itself does not contain a setting for
#    <w:decimalSymbol />
docx4j.Fields.Numbers.DecimalSymbol=.
# What character may be used to group thousands
docx4j.Fields.Numbers.GroupingSeparator=,
# What character may be used to separate styles and levels in \t switch field argument
docx4j.Fields.TOC.SwitchT.Separator=,

# The styles part content used by WordprocessingMLPackage createPackage
# and by getStyleDefinitionsPart(true) where the styles part is null
# This override available since docx4j 3.2.0
docx4j.openpackaging.parts.WordprocessingML.StyleDefinitionsPart.DefaultStyles=org/docx4j/openpackaging/parts/WordprocessingML/styles.xml

# Used to try to activate a style (PropertyResolver.activateStyle) which isn't defined in the styles part
# This override available since docx4j 3.2.0
docx4j.openpackaging.parts.WordprocessingML.StyleDefinitionsPart.KnownStyles=org/docx4j/openpackaging/parts/WordprocessingML/KnownStyles.xml

docx4j.openpackaging.parts.WordprocessingML.FontTablePart.DefaultFonts=org/docx4j/openpackaging/parts/WordprocessingML/fontTable.xml

docx4j.openpackaging.parts.WordprocessingML.NumberingDefinitionsPart.DefaultNumbering=org/docx4j/openpackaging/parts/WordprocessingML/numbering.xml

# Embedded Fonts - extract to dir
# By default, docx4j will extract embedded fonts to dir 
# ~/.docx4all/temporary embedded fonts
# (creating it if necessary).
#docx4j.openpackaging.parts.WordprocessingML.ObfuscatedFontPart.tmpFontDir=c:\\temp

##############################
# MergeDocx setup

# MergeDocx renames bookmarks (appending _document number) to ensure
# uniqueness. In some applications, hyperlinks in one document target
# another by bookmark name, and in that case, you want the names left
# as is (and it is up to you to ensure they are unique across documents)   
# @since 6.1.0
com.plutext.merge.BookmarkRenaming=true